# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18mYrQ4vsUC9e59Dz7DDLpxdKcT5CjRz0
"""



import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import plotly.express as px
import pandas as pd
from pyngrok import ngrok

# Dash uygulamasını başlat
app = dash.Dash(__name__)

# onlinefoods veri setini yükle (yolunuza göre değiştirin)
onlinefoods = pd.read_csv('onlinefoods.csv')  # CSV dosyasının yolu burada

# 1. Yaş Dağılımı (Histogram)
fig1 = px.histogram(onlinefoods, x='Age', title="Yaş Dağılımı", nbins=20)

# 2. Cinsiyet Dağılımı (Pie Chart)
fig2 = px.pie(onlinefoods, names='Gender', title="Cinsiyet Dağılımı")

# 3. Medeni Durum Dağılımı (Pie Chart)
fig3 = px.pie(onlinefoods, names='Marital Status', title="Medeni Durum Dağılımı")

# 4. Meslek Dağılımı (Bar Chart)
occupation_counts = onlinefoods['Occupation'].value_counts().reset_index()
occupation_counts.columns = ['Occupation', 'Count']
fig4 = px.bar(occupation_counts, x='Occupation', y='Count', title="Meslek Dağılımı")

# 5. Aylık Gelir Dağılımı (Histogram)
fig5 = px.histogram(onlinefoods, x='Monthly Income', title="Aylık Gelir Dağılımı", nbins=20)

# 6. Eğitim Durumu Dağılımı (Bar Chart)
edu_counts = onlinefoods['Educational Qualifications'].value_counts().reset_index()
edu_counts.columns = ['Educational Qualifications', 'Count']
fig6 = px.bar(edu_counts, x='Educational Qualifications', y='Count', title="Eğitim Durumu")

# 7. Aile Büyüklüğü Dağılımı (Bar Chart)
# 7. Aile Büyüklüğü Dağılımı (Bar Chart)
family_size_counts = onlinefoods['Family size'].value_counts().reset_index()
family_size_counts.columns = ['Family size', 'Count']  # Sütun isimlerini düzenle
fig7 = px.bar(family_size_counts, x='Family size', y='Count', title="Aile Büyüklüğü Dağılımı")


# Grafik açıklamaları
graph_descriptions = {
    'fig1': "Yaş dağılımı grafiği, kullanıcıların yaş aralıklarına göre nasıl dağıldığını gösterir. Bin sayısı 20'dir.",
    'fig2': "Cinsiyet dağılımı grafiği, kullanıcıların cinsiyetine göre dağılımını pie chart şeklinde gösterir.",
    'fig3': "Medeni durum dağılımı grafiği, kullanıcıların medeni durumlarına göre dağılmalarını pie chart ile sunar.",
    'fig4': "Meslek dağılımı grafiği, kullanıcıların mesleklerine göre dağılımlarını bar chart olarak gösterir.",
    'fig5': "Aylık gelir dağılımı grafiği, kullanıcıların gelir düzeylerinin dağılımını gösterir. Bin sayısı 20'dir.",
    'fig6': "Eğitim durumu dağılımı grafiği, kullanıcıların eğitim seviyelerinin nasıl dağıldığını bar chart şeklinde sunar.",
    'fig7': "Aile büyüklüğü dağılımı grafiği, kullanıcıların aile büyüklüklerine göre dağılımlarını gösterir."
}

# Dash layout
app.layout = html.Div(children=[
    html.H1("Ozan Möhürcü Dash Uygulaması - Onlinefoods Veri Seti"),

    # Dropdown menü ile grafik seçimi
    dcc.Dropdown(
        id='graph-dropdown',
        options=[
            {'label': 'Yaş Dağılımı', 'value': 'fig1'},
            {'label': 'Cinsiyet Dağılımı', 'value': 'fig2'},
            {'label': 'Medeni Durum Dağılımı', 'value': 'fig3'},
            {'label': 'Meslek Dağılımı', 'value': 'fig4'},
            {'label': 'Aylık Gelir Dağılımı', 'value': 'fig5'},
            {'label': 'Eğitim Durumu Dağılımı', 'value': 'fig6'},
            {'label': 'Aile Büyüklüğü Dağılımı', 'value': 'fig7'}
        ],
        value='fig1',  # Varsayılan olarak ilk grafik seçili
        style={'width': '50%'}
    ),

    # Grafik açıklaması
    html.Div(id='graph-description', children=[
        html.P(graph_descriptions['fig1'])  # Varsayılan açıklama
    ]),

    # Seçilen grafiği göstermek için placeholder
    dcc.Graph(id='graph-display')
])

# Callback ile dropdown menüye bağlı olarak grafik ve açıklama gösterimi
@app.callback(
    [Output('graph-display', 'figure'),
     Output('graph-description', 'children')],
    [Input('graph-dropdown', 'value')]
)
def update_graph(selected_graph):
    # Seçilen grafiği döndür
    if selected_graph == 'fig1':
        return fig1, graph_descriptions['fig1']
    elif selected_graph == 'fig2':
        return fig2, graph_descriptions['fig2']
    elif selected_graph == 'fig3':
        return fig3, graph_descriptions['fig3']
    elif selected_graph == 'fig4':
        return fig4, graph_descriptions['fig4']
    elif selected_graph == 'fig5':
        return fig5, graph_descriptions['fig5']
    elif selected_graph == 'fig6':
        return fig6, graph_descriptions['fig6']
    elif selected_graph == 'fig7':
        return fig7, graph_descriptions['fig7']

# Uygulamayı çalıştır
if __name__ == '__main__':
    app.run_server(debug=True, port=8050, use_reloader=False)



 # Ensure you have the latest version of pyngrok
from pyngrok import ngrok

# Replace "2qr2EUFfPJ6cQs2MKyUgX7IC7gZ_PjUQh3U2JtsmkYGWJVDU" with your actual authtoken
ngrok.set_auth_token("2qr2EUFfPJ6cQs2MKyUgX7IC7gZ_PjUQh3U2JtsmkYGWJVDU")

# Dash uygulamanızın portunu açıyoruz (8050 portu genellikle Dash için standarttır)
public_url = ngrok.connect(8050)
print('Dash uygulamanız şu URL üzerinden erişilebilir:', public_url)